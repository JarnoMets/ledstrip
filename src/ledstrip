# 1 "/media/jarno/Data/ledstripProject/ledstrip/ledstrip.ino"
# 1 "/usr/bin//"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "/media/jarno/Data/ledstripProject/ledstrip/ledstrip.ino"
# 1 "/media/jarno/Data/ledstripProject/ledstrip/audio.h" 1
# 2 "/media/jarno/Data/ledstripProject/ledstrip/ledstrip.ino" 2
# 1 "/media/jarno/Data/ledstripProject/ledstrip/bluetooth.h" 1



class Bluetooth {
  public:
   void init(void);
   int dataAvailable(void);
   int isConnected(void);
   void send(char*);
   char* read(void);
};

static Bluetooth bt;
# 3 "/media/jarno/Data/ledstripProject/ledstrip/ledstrip.ino" 2
# 1 "/media/jarno/Data/ledstripProject/ledstrip/ledDriver.h" 1
# 4 "/media/jarno/Data/ledstripProject/ledstrip/ledstrip.ino" 2
# 1 "/media/jarno/Data/ledstripProject/ledstrip/patterns.h" 1




const int pattern[][4][16] =
{
  {
    {200,0,0,3},
    {0,200,0,3},
    {0,0,200,3}
  },
  {
    {255,0,0,2},
    {0,0,0,2}
  }
};
# 5 "/media/jarno/Data/ledstripProject/ledstrip/ledstrip.ino" 2
# 17 "/media/jarno/Data/ledstripProject/ledstrip/ledstrip.ino"
int currentPattern = 0;

float red = 0;
float green = 0;
float blue = 0;
char string[32];

int neutral;

bool audio = false;
bool patternMode = false;

uint32_t patternTime = 0;

void initLed(void);
void initMic(void);

void updateLed(void);
void setLed(int, int, int);
void transition(int, int, int, uint32_t);
void transitionPattern(uint32_t);

void changePattern(int);
void updatePattern(void);

void readMic(void);

void setup() {
  initLed();
  initMic();
  Serial.begin(9600);
  bt.init();
  Serial.println("Device booted succesfully!");
}

void loop() {
    if (bt.dataAvailable() > 0) {
      char temp = Serial.read();
      if (temp != '\n' and temp != B1010 and temp != B1101) {
        strncat(string, &temp, 1);
      } else if (temp == B1101) {
        patternMode = 0;
        if (isDigit(string[0])) {
          Serial.println(string);
          char* tmpr;
          char* tmpg;
          char* tmpb;
          tmpr = strtok(string, ",");
          tmpg = strtok(NULL, ",");
          tmpb = strtok(NULL, ",");
          setLed(atoi(tmpr), atoi(tmpg), atoi(tmpb));
        } else {



          if (strcmp(string, "CONNECTED") == 0) {
              Serial.println("Led strip controls");
              Serial.print("Version ");
              Serial.println("1.0.5");
              Serial.println("By Jarno Mets");
          } else if (strcmp(string, "audioy") == 0) {
            audio = true;
          } else if (strcmp(string, "audion") == 0) {
            audio= false;
          } else if (strcmp(strtok(string, " "), "pattern") == 0) {
            patternMode = true;
            changePattern(atoi(strtok(NULL, " ")));
            patternTime = atoi(strtok(NULL, " "));

          } else if (strcmp(string, "red") == 0) {
            setLed(255, 0, 0);
          } else if (strcmp(string, "green") == 0) {
            setLed(0, 255, 0);
          } else if (strcmp(string, "blue") == 0) {
            setLed(0, 0, 255);
          } else if (strcmp(string, "white") == 0) {
            setLed(255, 255, 255);
          } else if (strcmp(string, "off") == 0) {
            setLed(0, 0 ,0);
          }
        }

        for (int i = 0; i < 32; i++) {
          string[i] = B0;
        }
      }
      updateLed();
    }

    if (audio)
      readMic();
    if (patternMode)
      if (patternTime > 100)
        transitionPattern(patternTime);







  updateLed();







}

void initLed(void) {
  pinMode(7, OUTPUT);
  pinMode(6, OUTPUT);
  red = 0;
  green = 100;
  blue = 100;
  updateLed();
}

void initMic(void) {
  static int neutral = 512;
  static bool audio = false;
  pinMode(A1, INPUT);
  neutral = analogRead(A1);
}

void updateLed() {
  digitalWrite(6, LOW);

  for (int i = 0; i < 32; i++) {
    digitalWrite(7, HIGH);
    digitalWrite(7, LOW);
  }

  for (int i = 0; i < 2; i++) {
    digitalWrite(6, HIGH);

    for (int i = 0; i < 2; i++) {
      digitalWrite(7, HIGH);
      digitalWrite(7, LOW);
    }

    if ((int)blue & 0x80 > 0)
      digitalWrite(6, LOW);
    else
      digitalWrite(6, HIGH);

    digitalWrite(7, HIGH);
    digitalWrite(7, LOW);

    if ((int)blue & 0x40 > 0)
      digitalWrite(6, LOW);
    else
      digitalWrite(6, HIGH);

    digitalWrite(7, HIGH);
    digitalWrite(7, LOW);

    if ((int)green & 0x80 > 0)
      digitalWrite(6, LOW);
    else
      digitalWrite(6, HIGH);

    digitalWrite(7, HIGH);
    digitalWrite(7, LOW);

    if ((int)green & 0x40 > 0)
      digitalWrite(6, LOW);
    else
      digitalWrite(6, HIGH);

    digitalWrite(7, HIGH);
    digitalWrite(7, LOW);

    if ((int)red & 0x80 > 0)
      digitalWrite(6, LOW);
    else
      digitalWrite(6, HIGH);

    digitalWrite(7, HIGH);
    digitalWrite(7, LOW);

    if ((int)red & 0x40 > 0)
      digitalWrite(6, LOW);
    else
      digitalWrite(6, HIGH);

    digitalWrite(7, HIGH);
    digitalWrite(7, LOW);

    for (int i = 0; i < 8; i++) {
      if (((int)blue << i)&0x80)
        digitalWrite(6, HIGH);
      else
        digitalWrite(6, LOW);

      digitalWrite(7, HIGH);
      digitalWrite(7, LOW);
    }

    for (int i = 0; i < 8; i++) {
      if (((int)green << i)&0x80)
          digitalWrite(6, HIGH);
      else
        digitalWrite(6, LOW);

      digitalWrite(7, HIGH);
      digitalWrite(7, LOW);
    }

    for (int i = 0; i < 8; i++) {
      if (((int)red << i)&0x80)
          digitalWrite(6, HIGH);
      else
        digitalWrite(6, LOW);

      digitalWrite(7, HIGH);
      digitalWrite(7, LOW);
    }
  }
}

void setLed(int redEnd, int greenEnd, int blueEnd) {
  red = redEnd;
  green = greenEnd;
  blue = blueEnd;
}

void transition(int redEnd, int greenEnd, int blueEnd, uint32_t dTime) {
  int redStart = red;
  int greenStart = green;
  int blueStart = blue;

  for (int i = 0; i < dTime; i+=50) {
    if (Serial.available() > 0)
      break;

    if (redStart > redEnd)
      red -= ((float)(redStart - redEnd) / (dTime / 50));

    if (greenStart > greenEnd)
      green -= ((float)(greenStart - greenEnd) / (dTime / 50));

    if (blueStart > blueEnd)
      blue -= ((float)(blueStart - blueEnd) / (dTime / 50));

    if (redStart < redEnd)
      red += ((float)(redEnd - redStart) / (dTime / 50));

    if (greenStart < greenEnd)
      green += ((float)(greenEnd - greenStart) / (dTime / 50));

    if (blueStart < blueEnd)
      blue += ((float)(blueEnd - blueStart) / (dTime / 50));


    if (redStart > redEnd) {
      if (red < redEnd) {
        red = redEnd;
      }
    }

    if (greenStart > greenEnd) {
      if (green < greenEnd) {
        green = greenEnd;
      }
    }

    if (blueStart > blueEnd) {
      if (blue < blueEnd) {
        blue = blueEnd;
      }
    }

    if (redStart < redEnd) {
      if (red > redEnd) {
        red = redEnd;
      }
    }

    if (greenStart < greenEnd) {
      if (green > greenEnd) {
        green = greenEnd;
      }
    }

    if (blueStart < blueEnd) {
      if (blue > blueEnd) {
        blue = blueEnd;
      }
    }
    updateLed();
    delay(50);
  }
}

void transitionPattern(uint32_t dt) {
  static int patternStep = 0;
  transition(pattern[currentPattern][patternStep][0],pattern[currentPattern][patternStep][1],pattern[currentPattern][patternStep][2],dt);
  patternStep++;

  if (patternStep > pattern[currentPattern][patternStep][3])
    patternStep = 0;

}

void readMic(void) {

    static int result = 0;
    static int counter = 0;
    static int peak = 20;
    static int cooldown = 0;


    result = analogRead(A1);

    if (abs(result - 615) > peak && abs(result - 615) < 300)
      peak = abs(result - 615);

    if (cooldown == 0 && (result > 615 + peak*0.5 || result < 615 - peak*0.5)) {
      updatePattern();
      cooldown = 1;
    }

    counter++;

    if (cooldown)
      cooldown--;

    if (counter > 25) {
      peak = 20;
      counter = 0;
    }
    delay(100);
}

void changePattern(int nPat) {
  currentPattern = nPat;
}

void updatePattern(void) {
  static int patternStep = 0;
  patternStep++;
  if (patternStep > pattern[currentPattern][patternStep][3])
    patternStep = 0;
  setLed(pattern[currentPattern][patternStep][0],pattern[currentPattern][patternStep][1],pattern[currentPattern][patternStep][2]);
}
